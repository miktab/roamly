// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MDB_URI")
}

model customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  fingerprint String
  page        String
  queryData   String
  experiment  String?
  email       String
  name        String
  productId   String?
  price       Float?
  currency    String?  @default("USD")
  siteName    String   @default("roamly")
}

model checkout {
  checkoutId            String  @id @default(auto()) @map("_id") @db.ObjectId
  checkoutSessionId     String  @unique
  totalOrder            Int
  confirmationEmailSent Boolean

  siteName   String
  email      String
  customerId String
  userId     String?  @db.ObjectId // Optional link to User

  productCategory     String //event or product
  productType         String //eventType (e.g., moneyWebinar, RemoteReadyBootcamp) for events or productType (e.g., Course, Bootcamp) for products
  productId           Int //eventId or productId
  product_description String?
  experiment          String?
  checkoutTime        DateTime
  
  // Customer information
  name        String?
  phoneNumber String?
  currentCity String?
  canReschedule   Boolean @default(false)

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model visitor {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  fingerprint String
  page        String
  queryData   String
  experiment  String?
  siteName    String   @default("roamly")
}

// NextAuth models - simplified version
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String?   // For credential-based auth
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  checkouts     checkout[]
  purchases     Purchase[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Purchase {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  checkoutSessionId String   @unique
  productCategory   String   // event or product
  productType       String   // eventType (e.g., moneyWebinar) for events or productType (e.g., Course) for products
  productId         Int      // eventId or productId
  totalOrder        Int
  siteName          String
  productDescription String?
  purchaseDate      DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, checkoutSessionId])
}
